 package pt.progJava.americoLib.control107.frame;
 
 import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.net.Socket;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import pt.progJava.americoLib.control107.service.ClienteService;
import pt.progJava.americoLib.control108.bean.ChatMessage;

 public class ClientFrame extends javax.swing.JFrame
 {

		private static final long serialVersionUID = 1L;
		private Socket socket;
	   private ChatMessage message;
	   private JButton btnConectar;
	   private JButton btnEnviar;
	   private JButton btnLimpar;
	   private JButton btnSair;
	   private JPanel jPanel1;
	   private JPanel jPanel2;
	   private JPanel jPanel3;
	   private JScrollPane jScrollPane1;
	   private JScrollPane jScrollPane2;
	   private JScrollPane jScrollPane3;
	   private JList listOnlines;
	   private JTextArea txtAreaReceive;
	   private JTextArea txtAreaSend;
	   private JTextField txtName;
	   private ClienteService service;
   
   public ClientFrame()
   {
     initComponents();
   }
   
   private class ListenerSocket
     implements Runnable
   {
     private java.io.ObjectInputStream input;
     
     public ListenerSocket(java.net.Socket socket)
     {
       try
       {
         this.input = new java.io.ObjectInputStream(socket.getInputStream());
       } catch (java.io.IOException ex) {
         java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       }
     }
     
     public void run()
     {
       ChatMessage message = null;
       try
       {
         while ((message = (ChatMessage)this.input.readObject()) != null) {
           ChatMessage.Action action = message.getAction();
           
           if (action.equals(ChatMessage.Action.CONNECT)) {
             ClientFrame.this.connect(message);
           } else if (action.equals(ChatMessage.Action.DISCONNECT)) {
             ClientFrame.this.disconnected();
             ClientFrame.this.socket.close();
           } else if (action.equals(ChatMessage.Action.SEND_ONE)) {
             ClientFrame.this.receive(message);
           } else if (action.equals(ChatMessage.Action.USERS_ONLINE)) {
             ClientFrame.this.refreshOnlines(message);
           }
         }
       } catch (java.io.IOException ex) {
         java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       }
     }
   }

   private void connect(ChatMessage message)
   {
     if (message.getText().equals("NO")) {
       this.txtName.setText("");
       javax.swing.JOptionPane.showMessageDialog(this, "CONNECTION FAILERD.\n TRY AGAIN WITH A DIFERENT NAME");
       return;
     }
     
     this.message = message;
     
     this.btnConectar.setEnabled(false);
     this.txtName.setEditable(false);
     
 
     this.btnSair.setEnabled(true);
     this.txtAreaSend.setEnabled(true);
     this.txtAreaReceive.setEnabled(true);
     
     this.btnEnviar.setEnabled(true);
     this.btnLimpar.setEnabled(true);
     
     javax.swing.JOptionPane.showMessageDialog(this, "CONNECTION SUCCEDED.\n YOU ARE CONNECTED IN CHATROOM");
   }
   
   private void disconnected()
   {
     this.btnConectar.setEnabled(true);
     this.txtName.setEnabled(true);
     
     this.btnSair.setEnabled(false);
     this.txtAreaSend.setEnabled(false);
     this.txtAreaReceive.setEnabled(false);
     this.btnEnviar.setEnabled(false);
     this.btnLimpar.setEnabled(false);
     
     this.txtAreaReceive.setText("");
     this.txtAreaSend.setText("");
     
     javax.swing.JOptionPane.showMessageDialog(this, "YOU HAVE LEFT THE CHATROOM");
   }
   
   private void receive(ChatMessage message) {
     this.txtAreaReceive.append(message.getName() + " SAID: " + message.getText() + "\n");
   }
   
   private void refreshOnlines(ChatMessage message)
   {
     System.out.println(message.getSetOnlines().toString());
     java.util.Set<String> names = message.getSetOnlines();
     
     names.remove(message.getName());
     
     String[] array = (String[])names.toArray(new String[names.size()]);
     
     this.listOnlines.setListData(array);
     this.listOnlines.setSelectionMode(0);
     this.listOnlines.setLayoutOrientation(0);
   }
   
   private void initComponents()
   {
	   
		//TABS
       setTitle("QuequeAPP");
       JTabbedPane jtp = new JTabbedPane();
       getContentPane().add(jtp);
       
       //PANEL1
       JPanel envio = new JPanel();
       JLabel label1 = new JLabel();
       label1.setText("MY CONTACTS");  
       envio.add(label1);  
       
       //PANEL2
       JPanel jp2 = new JPanel();
	   
     this.jPanel1 = new JPanel();
     this.txtName = new javax.swing.JTextField();
     this.btnConectar = new JButton();
     this.btnSair = new JButton();
     this.jPanel2 = new JPanel();
     this.jScrollPane3 = new JScrollPane();
     this.listOnlines = new javax.swing.JList();
     this.jPanel3 = new JPanel();
     this.jScrollPane1 = new JScrollPane();
     this.txtAreaReceive = new JTextArea();
     this.jScrollPane2 = new JScrollPane();
     this.txtAreaSend = new JTextArea();
     this.btnEnviar = new JButton();
     this.btnLimpar = new JButton();
     
//     setDefaultCloseOperation(3);
     
     //PANEL1
     jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("CONNECT"));
     btnConectar.setText("Connect");
     btnConectar.addActionListener(new java.awt.event.ActionListener() {
       public void actionPerformed(ActionEvent evt) {
         ClientFrame.this.btnConectarActionPerformed(evt);
       }
       
     });
     
     btnSair.setText("Exit");
     btnSair.setEnabled(false);
     btnSair.addActionListener(new java.awt.event.ActionListener() {
       public void actionPerformed(ActionEvent evt) {
         ClientFrame.this.btnSairActionPerformed(evt);
       } 
     });
     
     //PANEL2
     jPanel2.setBorder(BorderFactory.createTitledBorder("USERS ONLINE")); 
     jScrollPane3.setViewportView(this.listOnlines);
     jPanel2.add(jScrollPane1);
     
     //PANEL3
     jPanel3.setBorder(BorderFactory.createEtchedBorder());
     
     txtAreaReceive.setEditable(false);
     txtAreaReceive.setColumns(20);
     txtAreaReceive.setRows(5);
     txtAreaReceive.setEnabled(false);
     jScrollPane1.setViewportView(this.txtAreaReceive);
     
     txtAreaSend.setColumns(20);
     txtAreaSend.setRows(5);
     txtAreaSend.setEnabled(false);
     jScrollPane2.setViewportView(this.txtAreaSend);
     
     this.btnEnviar.setText("Send");
     this.btnEnviar.setEnabled(false);
     this.btnEnviar.addActionListener(new java.awt.event.ActionListener() {
       public void actionPerformed(ActionEvent evt) {
         ClientFrame.this.btnEnviarActionPerformed(evt);
       }
       
     });
     this.btnLimpar.setText("Clear");
     this.btnLimpar.setEnabled(false);
     this.btnLimpar.addActionListener(new java.awt.event.ActionListener() {
       public void actionPerformed(ActionEvent evt) {
         ClientFrame.this.btnLimparActionPerformed(evt);
       }
       
     });

     jPanel3.add(jScrollPane1);
     jPanel3.add(btnLimpar);
     jPanel3.add(btnEnviar);
     
     jPanel1.add(txtName);
     jPanel1.add(btnConectar);
     jPanel1.add(btnSair);
     
 
		jp2.setLayout(new BorderLayout());
		jp2.add(BorderLayout.NORTH, jPanel1);
		jp2.add(BorderLayout.CENTER, jPanel2);
		jp2.add(BorderLayout.SOUTH, jPanel3);

        
        //ADD PANELS TO TABS
		jtp.addTab("CHAT", jp2);
        jtp.addTab("CONTACTS", envio);
     
     
     pack();
   }
   
   private void btnConectarActionPerformed(ActionEvent evt) {
     String name = this.txtName.getText();
     
     if (!name.isEmpty()) {
       this.message = new ChatMessage();
       this.message.setAction(ChatMessage.Action.CONNECT);
       this.message.setName(name);
       
       this.service = new ClienteService();
       this.socket = this.service.connect();
       
       new Thread(new ListenerSocket(this.socket)).start();
       this.service.send(this.message);
     }
     this.txtAreaSend.setText("");
   }
   
   private void btnSairActionPerformed(ActionEvent evt) {
     this.message.setAction(ChatMessage.Action.DISCONNECT);
     this.service.send(this.message);
     disconnected();
   }
   
   private void btnLimparActionPerformed(ActionEvent evt)
   {
     this.txtAreaSend.setText("");
   }
   
   private void btnEnviarActionPerformed(ActionEvent evt)
   {
     String text = this.txtAreaSend.getText();
     String name = this.message.getName();
     
 
     this.message = new ChatMessage();
     
 
     if (this.listOnlines.getSelectedIndex() > -1) {
       this.message.setNameReserved((String)this.listOnlines.getSelectedValue());
       this.message.setAction(ChatMessage.Action.SEND_ONE);
       this.listOnlines.clearSelection();
     }
     else {
       this.message.setAction(ChatMessage.Action.SEND_ALL);
     }
     
 
     if (!text.isEmpty())
     {
 
       this.message.setName(name);
       this.message.setText(text);
       
       this.txtAreaReceive.append("YOU SAID: " + text + "\n");
       
       this.service.send(this.message);
     }
     this.txtAreaSend.setText("");
   }
 }
   