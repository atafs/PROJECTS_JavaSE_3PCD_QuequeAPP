package com.iscte.queque.client.service;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import com.iscte.queque.client.dao.Contact;
import com.iscte.queque.client.log.LogMessage;
import com.iscte.queque.client.serializable.ChatMessage;

public class ServerService extends JFrame{
	
	//ATTRIBUTES
	public  int port = 5555;
	public static String ip = "";
	private ServerSocket serverSocket;
	private Socket socket;
	
	//LISTS
	private Map<String, ObjectOutputStream> mapOnlies = new HashMap<String, ObjectOutputStream>();
	private Map<String, PriorityQueue<ChatMessage>> queueLists = new HashMap<String, PriorityQueue<ChatMessage>>();
	private List<Contact> listContacts = new ArrayList<Contact>();

	//LOG4J LOGGER
	private static LogMessage logger = new LogMessage();
	private static final long serialVersionUID = 1L;
	
	//GUI	
	//LISTS
	public static ArrayList<Socket> list_sockets = new ArrayList<Socket>();
	public static ArrayList<Integer> list_cliente_states = new ArrayList<Integer>();	
	
	//GUI
	public JPanel content;
	public JPanel panel1;
	public JPanel panel2;
	public JPanel panel3;
	public JButton btn_disconnect;
	public JList list_client;
	public DefaultListModel list_clients_model;
	private JTextArea txtAreaReceive;
	private JScrollPane jScrollPane1;

	


	public ServerService() {
		//INSTANTIATE SERVER GUI
		gui_initComponents();
        gui_lastInstructions();
        gui_start(); 
		
		try {			
			this.serverSocket = new ServerSocket(port);
			System.out.println("SERVIDOR ON.");
			for (;;) {
				this.socket = this.serverSocket.accept();

				//THREAD
				new Thread(new Out(this.socket)).start();
			}
		} catch (Exception e) {
			logger.getLog().debug(e);

		}
	}

	private class Out implements Runnable {
		private ObjectOutputStream output;
		private ObjectInputStream input;

		public Out(Socket socket) {
			try {
				this.output = new ObjectOutputStream(socket.getOutputStream());
				this.input = new ObjectInputStream(socket.getInputStream());
			} catch (IOException ex) {
				logger.getLog().debug(ex);

			}
		}

		public void run() {
			ChatMessage message = null;
			try {
				while ((message = (ChatMessage) this.input.readObject()) != null) {
					ChatMessage.Action action = message.getAction();

					if (action.equals(ChatMessage.Action.CONNECT)) {
						boolean isConnected = ServerService.this.connect(message, this.output);

						if (isConnected) {
							ServerService.this.mapOnlies.put(message.getName(), this.output);
							ServerService.this.sendOnlines();
						}
					} else if (action.equals(ChatMessage.Action.SEND_ONE)) {
							ServerService.this.sendOne(message);
					}
				}
			} catch (IOException ex) {
				ServerService.this.disconnected(message, this.output);
				ServerService.this.sendOnlines();
				System.out.println(message.getName() + " LEFT THE CHAT.");
				logger.getLog().debug(message.getName() + " LEFT THE CHAT.");
			} catch (ClassNotFoundException ex) {
				logger.getLog().debug(ex);

			}
		}
	}

	private boolean connect(ChatMessage message, ObjectOutputStream output) {
		if (this.mapOnlies.size() == 0) {
			message.setText("YES");
			System.out.println("YES. YOU ARE CONNECTED. And YOU ARE THE FIRST ONE");
			send(message, output);
			return true;
		}

		Iterator it = this.mapOnlies.entrySet().iterator();
		if (it.hasNext()) {
			Map.Entry<String, ObjectOutputStream> kv = (Map.Entry) it.next();

			if (((String) kv.getKey()).equals(message.getName())) {
				message.setText("NO");
				System.out.println("NO. NOT CONNECTED YET");
				send(message, output);
				return false;
			}
			message.setText("YES");
			System.out.println("YES. YOU ARE CONNECTED.");
			send(message, output);
			return true;
		}

		return false;
	}

	private void disconnected(ChatMessage message, ObjectOutputStream output) {
		this.mapOnlies.remove(message.getName());

		message.setText("LEFT CHATROOM. SEE YOU NEXT TIME!!!");

		message.setAction(ChatMessage.Action.SEND_ONE);
//		sendAll(message);
		System.out.println("USER -> " + message.getName() + " LEFT THE CHATROOM");
	}

	private void send(ChatMessage message, ObjectOutputStream output) {
		try {
			output.writeObject(message);
		} catch (IOException ex) {
			logger.getLog().debug(ex);
		}
	}

	private void sendOne(ChatMessage message) {
		for (Map.Entry<String, ObjectOutputStream> kv : this.mapOnlies.entrySet()) {
			if (((String) kv.getKey()).equals(message.getNameReserved())) {
				try {

					//TODO americo 
					message.setState(ChatMessage.Action.OFFLINE);
					
					if (message.getState().equals(ChatMessage.Action.ONLINE)) {
						((ObjectOutputStream) kv.getValue()).writeObject(message);
					} else if (message.getState().equals(ChatMessage.Action.OFFLINE)) {
						//saveCacheMessage(message, kv);
						//CHECK IF EXISTS
						boolean flagContactExists = false;
						int index = 0;
						for (int i = 0; i < listContacts.size(); i++) {
							if (listContacts.get(i).getName().equals(kv.getKey())) {
								flagContactExists = true;	
								index = i;
							}
						}
						
						//NEW CONTACT
						if(!flagContactExists) {
							int indexLast = listContacts.size()-1;
							if (indexLast == -1) {
								indexLast = 0;
							}
							
							String tempName = message.getNameReserved();
							listContacts.add(new Contact(tempName));
							
							String temMessage = message.getText();
							listContacts.get(indexLast).getMessageQueue().add(temMessage);
							
							int tempCounter = listContacts.get(indexLast).getMessagesToReceive() + 1;
							listContacts.get(indexLast).setMessagesToReceive(tempCounter);

						} 
						
						//EXISTING CONTACT
						else {
							String tempName = message.getNameReserved();
							listContacts.get(index).setName(tempName);
							
							String temMessage = message.getText();
							listContacts.get(index).getMessageQueue().add(temMessage);
							
							int tempCounter = listContacts.get(index).getMessagesToReceive() + 1;
							listContacts.get(index).setMessagesToReceive(tempCounter);
						}
						
						//TODO americo 
						((ObjectOutputStream) kv.getValue()).writeObject(message);

					}
				} catch (IOException ex) {
					logger.getLog().debug(ex);
				}
			}
		}
	}

//	private void sendAll(ChatMessage message) {
//		for (Map.Entry<String, ObjectOutputStream> kv : this.mapOnlies.entrySet()) {
//
//			if (!((String) kv.getKey()).equals(message.getName())) {
//				message.setAction(ChatMessage.Action.SEND_ONE);
//				try {
//					System.out.println("USER -> " + message.getName());
//					((ObjectOutputStream) kv.getValue()).writeObject(message);
//				} catch (IOException ex) {
//					logger.getLog().debug(ex);
//				}
//			}
//		}
//	}

	private void sendOnlines() {
		Set<String> setNames = new HashSet<String>();
		for (Map.Entry<String, ObjectOutputStream> kv : this.mapOnlies.entrySet()) {
			setNames.add(kv.getKey());
		}
		
		

		ChatMessage message = new ChatMessage();
		message.setAction(ChatMessage.Action.USERS_ONLINE);
		message.setSetOnlines(setNames);

		for (Map.Entry<String, ObjectOutputStream> kv : this.mapOnlies.entrySet()) {
			message.setName((String) kv.getKey());
			try {
				((ObjectOutputStream) kv.getValue()).writeObject(message);
			} catch (IOException ex) {
				logger.getLog().debug(ex);
			}
		}
	}
	
	/** */
	private void saveCacheMessage(ChatMessage message, Map.Entry<String, ObjectOutputStream> kv) {
		
	}
	

	/** */
	private void gui_initComponents() {
		
//		btn_disconnect = new JButton();
//		btn_disconnect.setText("Disconnect");
//		btn_disconnect.addActionListener(new ActionListener() {
//
//			@Override
//			public void actionPerformed(ActionEvent e) {
//				int selected = list_client.getSelectedIndex();
//
//				if (selected != -1) {
//
//					try {
//						list_cliente_states.set(selected, 1);
//					} catch (Exception e2) {
//						JOptionPane.showMessageDialog(null, "ERROR: " + e2.getMessage(), "ALERT", JOptionPane.ERROR_MESSAGE);
//					}
//				}
//			}
//		});

		// TABS
		try {
			ip = InetAddress.getLocalHost().getHostAddress() + ":" + port;
		} catch (UnknownHostException e1) {
			e1.printStackTrace();
		}

		setTitle("QuequeAPP - SERVER - " + ip);
		JTabbedPane jtp = new JTabbedPane();
		getContentPane().add(jtp);
	
		// PANEL1
		JPanel envio = new JPanel();
		JLabel label1 = new JLabel();
		label1.setText("MY SERVER");
		envio.add(label1);
		
		list_clients_model = new DefaultListModel<>();
		list_client = new JList<>(list_clients_model);
		list_client.addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent e) {

				if (e.getValueIsAdjusting()) {
					System.out.println(list_client.getSelectedIndex());
				}
			}
		});

		//TEXTAREA
		// PANEL2
		JPanel jp2 = new JPanel();
		this.txtAreaReceive = new JTextArea();
		this.jScrollPane1 = new JScrollPane();

		txtAreaReceive.setColumns(20);
		txtAreaReceive.setRows(5);
		txtAreaReceive.setEnabled(false);
		txtAreaReceive.setSize(jp2.getWidth(), jp2.getHeight());
		jScrollPane1.setViewportView(this.txtAreaReceive);
		
		
		addWindowListener(new WindowListener() {

			@Override
			public void windowOpened(WindowEvent arg0) {}

			@Override
			public void windowIconified(WindowEvent arg0) {}

			@Override
			public void windowDeiconified(WindowEvent arg0) {}

			@Override
			public void windowDeactivated(WindowEvent arg0) {}

			@Override
			public void windowClosing(WindowEvent arg0) {
				while(list_sockets.size() != 0) {
					
					try {
						for (int i = 0; i < list_cliente_states.size(); i++) {
							list_cliente_states.set(i, 2);
						}
					} catch (Exception e) {
						
					}
				}
				
				System.exit(0);
			}

			@Override
			public void windowClosed(WindowEvent arg0) {}

			@Override
			public void windowActivated(WindowEvent arg0) {}
		});
		
		panel1 = new JPanel();
		panel1.setLayout(new GridLayout(1, 1, 1, 1));
//		panel1.add(btn_disconnect);
		
		panel2 = new JPanel();
		panel2.add(new JLabel(ip));
		
		panel3 = new JPanel();
		panel3.setLayout(new BorderLayout(1,1));
		panel3.add(panel1, BorderLayout.NORTH);
		panel3.add(new JScrollPane(list_client), BorderLayout.CENTER);
		panel3.add(panel2, BorderLayout.SOUTH);
		
//		setLayout(new GridLayout(1,1,1,1));
//		add(panel3);
			
		// ADD PANELS TO TABS
		//jtp.addTab("CHAT", jp2);
		jtp.addTab("SERVER ;-)", panel3);
		jtp.addTab("DEBUG", envio);

	}
	
	/** INIT: */
    private void gui_lastInstructions() {
		setLocationRelativeTo(null);
		pack();
		setSize(700,400);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    
    /** START: */
    private void gui_start() {
    	setVisible(true);
    }
    	
}
