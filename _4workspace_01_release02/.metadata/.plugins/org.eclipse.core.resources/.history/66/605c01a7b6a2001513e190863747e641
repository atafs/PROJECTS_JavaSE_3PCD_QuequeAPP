package com.iscte.queque._2concurrency.lock.synchronized_._vSync_2Hash;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

public class HashSyncMain {
	
	//ATTRIBUTES
	private HashMap<String,ArrayList<Integer>> map;
	private int count;
	
	//CONSTANTS
	private final int MAX = 5;
	private final int SLEEP = 125;
	
	//THREADS
	private Thread t1;
	private Thread t2;
	
	//CONSTRUCTOR
	public HashSyncMain() {
		this.map = new HashMap<String,ArrayList<Integer>>();
		this.count = 0;
	}
	
	//GETTER
	public HashMap<String,ArrayList<Integer>> getMap() {
		return map;
	}
	
	public int getCount() {
		return count;
	}

	//MAIN
	public static void main(String[] args) {
		//INSTANTIATE
		HashSyncMain hashSync = new HashSyncMain();
		System.out.println("STARTING THE APP..........................");
		
		//ANNONYMOUS CLASS
		hashSync.t1 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				//LOOP
				for (int i = 0; i < hashSync.MAX; i++) {
					hashSync.addElement_map(hashSync.t1, hashSync.MAX);
				}				
			}
		});
		
		//ANNONYMOUS CLASS
		hashSync.t2 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				//LOOP
				for (int i = 0; i < hashSync.MAX; i++) {
					hashSync.addElement_map(hashSync.t2, hashSync.MAX);
				}			
			}
		});
		
		//START
		hashSync.t1.start();
		hashSync.t2.start();
		
		// SLEEP
		hashSync.sleepIncount(3000);
		
		//JOIN
		try {
			hashSync.t1.join();
			hashSync.t2.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		//PRINT
		hashSync.displayData();
	}
	
	//PUT
	public synchronized void addElement_map(Thread t, int number) {
		// ACTION: PUT elements to the map
		ArrayList<Integer> integers = new ArrayList<Integer>();
		for (int i = 0; i < number; i++) {
			integers.add(count);
		}
		map.put(t.getName(), integers);

		// SLEEP
		sleepIncount();
	}
	
	//GET
	public synchronized void displayData(){
		for (Entry<String, ArrayList<Integer>> entry : map.entrySet()) {
			System.out.print(entry.getKey() + " | ");
			for (int integer : entry.getValue()) {
				System.out.print(integer + " ");
			}
			System.out.println();
		}

		// SLEEP
		sleepIncount();
	}
	
	//METHOD SLEEP
	public void sleepIncount() {
		//SLEEP
		try {
			Thread.sleep(this.SLEEP);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	//METHOD SLEEP
	public void sleepIncount(int milis) {
		//SLEEP
		try {
			Thread.sleep(milis);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
